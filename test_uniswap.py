import sys

sys.path.append("../toolbox")

from etherscan_api import *
from task import *

from web3 import Web3


# def encode_path(token_addresses, fees):
#     hex_values = []
#     for token_address, fee in zip(token_addresses, fees):
#         # 将代币地址转换为bytes类型，然后再转换为十六进制字符串
#         hex_values.append(token_address[2:])  # 去掉前缀"0x"
#         hex_values.append(Web3.to_hex(fee)[2:].zfill(6))

#     path = "0x" + "".join(hex_values)
#     return path


# # 示例输入
# token_addresses = [
#     "0x4200000000000000000000000000000000000006",
#     "0x4200000000000000000000000000000000000042",
# ]
# fees = [0, 500]

# # 调用函数生成编码路径
# encoded_path = encode_path(token_addresses, fees)

# print("Encoded Path:", encoded_path)


import struct
from eth_utils import to_bytes, to_canonical_address


# def encode_packed(types, values):
#     result = b""
#     for t, v in zip(types, values):
#         if t == "uint8":
#             result += struct.pack("B", v)
#         elif t == "uint24":
#             result += v.to_bytes(3, "big")
#         elif t == "uint256":
#             result += v.to_bytes(32, "big")
#         elif t == "address":
#             result += to_canonical_address(v)
#         else:
#             raise ValueError(f"Unrecognized type: {t}")

#     return result

# types = ["address", "uint24", "address"]
# values = [
#     "0x4200000000000000000000000000000000000042",
#     500,
#     "0x4200000000000000000000000000000000000006",
# ]
# encoded = encode_packed(types, values)
# print(encoded.hex())


from eth_abi import encode, decode

hex_data = "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000002cf434ef2f27d00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b42000000000000000000000000000000000000420001f44200000000000000000000000000000000000006000000000000000000000000000000000000000000"
params_type = ["address", "uint256", "uint256", "bytes", "bool"]
hex_data = "a378534b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000002dc6c600000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000205a65726f457800000000000000000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000006600000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000004200000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005c8415565b00000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000420000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000002da3b90000000000000000000000000000000000000000000000001eb259eacfcb67d200000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000004200000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000002da3b9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000001d56656c6f64726f6d650000000000000000000000000000000000000000000000000000000000000000000000002da3b90000000000000000000000000000000000000000000000001eb259eacfcb67d200000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000a132dab612db5cb9fc9ac426a0cc215a3423f9c90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000001594e98f4f64a1dcb1000000000000000000000000000000000000000000000000f1f2000000000000000000000000000a"
params_type = [
    "uint256",
    "(address,uint256,(bytes32,address,bytes)[],bool)[]",
]

# contract: 0x9a065e500cdcd01c0a506b0eb1a8b060b0ce1379 -> 0xa5C5AEAE9FB5424f9Ab6D2e4C1C108F988aE3f6e
# Function: processInputOrders(uint256, (address,uint256,tuple[],bool)[])
hex_data = "90e1aa690000000000000000000000000000000000000000000000000000000000007b770000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000001e7cb10000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020466c6174000000000000000000000000000000000000000000000000000000000000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000400000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000001e6559f1f20000000000000000000000000002"
params_type = [
    "uint256",
    "(address,uint256,(bytes32,address,bytes)[],bool)[]",
]

# contract: 0xdef1abe32c034e558cdd535791643c58a13acc10 -> 0x23e1fcF553A7dB590562f8a47bd76A28E358455E
# Function: transformERC20(address, address, uint256, uint256, (uint32,bytes)[])
hex_data = "415565b00000000000000000000000004200000000000000000000000000000000000042000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000e2d616b7086fe110000000000000000000000000000000000000000000000000002d95406c6e3bf400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000000000000000000000820000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000420000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000e2d616b7086fe110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000001d56656c6f64726f6d6500000000000000000000000000000000000000000000000000000000000000e2d616b7086fe110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000a132dab612db5cb9fc9ac426a0cc215a3423f9c90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000002e0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000002d95406c6e3bf3000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c0586156400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b7f5c764cbc14f9669b88837ca1490cca17c316070001f442000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000004200000000000000000000000000000000000006ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000042000000000000000000000000000000000000420000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000382ffce2287252f930e1c8dc9328dac5bf282ba100000000000000000000000000000000000000000000001b814b2e8e64bb8a3e"
params_type = [
    "address",
    "address",
    "uint256",
    "uint256",
    "(uint32,bytes)[]",
]

# contract: 0x1a0ad011913A150f69f6A19DF447A0CfD9551054 -> 0x43260ee547c3965bb2a0174763bb8fecc650ba4a
hex_data = "e9e05c42000000000000000000000000007777777e83977a6808f19782028b167711769000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000288b77a147b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000012d996f7159beaa59fdf6c0ec0b2262858d468dc16d790e8eb354bba25f9282f249164366128e84cdc1e57f601edb8a0f454044ed4095c337066764cbe7c53a466ec830057f4c9a5fcc37a59713f8a40368df3e75603f4153c66562e64e89577894d92dc1a26a9f075ac20a66219ede2bb07f65cc2fa203b4f3795bf217b2d61482c76ef2e8799e9982c5463303c7ec802cc0b1a6c11de2591f9b45d97ab65eeb647baae93644e4a48d08ffca770f7b19490b5f86b88e5e35311815b46dd0fccb53d5de94656157450686b71b13cd6581601be5a2f33a15fe0ca367ad0ee264f178cd3da6b16bb4b21c33acd299202180d183f0f9941313d1fd26ab84a31082d19a3d63b552e547babc72711e950965efc7be63cef61fee7a62201fc83033040c61fa96fec7b1913e6f5c3125f9d1c7b5da559c74cae0cff387c4e8e8c9815b27b57f7c66db2359d9f01d9d3ee2022b9de4436cdd930972fa1a9446d8f7747336b3651720d89601a5a1b19492b14d2c31e2f99b198b9208143cd3d0669d8028a2f2d67c2a143e17b919bf87a6e4b85f7bbd84e96a1c402dd47501b0862fa7086a5a26490e73f80685054e842ed44bedce662673bb75f3ce65f7259ff62ffcabd5b59dc6dc03b667409f0af0cd2e5cfe5aec2beea92cc5eb69d2bc2787c25e03703495e8c9b3af47c22615e8926a055b96c3643edbd18e0dd121f263709562cc22a1a41ae1d66fd1aaada65bf585a420e207a7e19813920675ac4391b58858cc1aaeae7f3504df99858342509a6049924168b8cfa212bb056b5bcbd8c85a5c7cb730021fb3f000000000000000000000000000000000000000000000000"
params_type = ["address", "uint256", "uint64", "bool", "bytes"]

data = bytes.fromhex(hex_data)

data = bytes.fromhex(hex_data[8:])
decoded = decode(params_type, data)
print(decoded)
# print(decoded[4].hex())
# b77a147b mint(bytes32[])
mint_data = decode(["bytes32[]"], bytes.fromhex(decoded[4].hex()[8:]))
print([item.hex() for item in mint_data[0]])

proof = [
    "0xd996f7159beaa59fdf6c0ec0b2262858d468dc16d790e8eb354bba25f9282f24",
    "0x9164366128e84cdc1e57f601edb8a0f454044ed4095c337066764cbe7c53a466",
    "0xec830057f4c9a5fcc37a59713f8a40368df3e75603f4153c66562e64e8957789",
    "0x4d92dc1a26a9f075ac20a66219ede2bb07f65cc2fa203b4f3795bf217b2d6148",
    "0x2c76ef2e8799e9982c5463303c7ec802cc0b1a6c11de2591f9b45d97ab65eeb6",
    "0x47baae93644e4a48d08ffca770f7b19490b5f86b88e5e35311815b46dd0fccb5",
    "0x3d5de94656157450686b71b13cd6581601be5a2f33a15fe0ca367ad0ee264f17",
    "0x8cd3da6b16bb4b21c33acd299202180d183f0f9941313d1fd26ab84a31082d19",
    "0xa3d63b552e547babc72711e950965efc7be63cef61fee7a62201fc83033040c6",
    "0x1fa96fec7b1913e6f5c3125f9d1c7b5da559c74cae0cff387c4e8e8c9815b27b",
    "0x57f7c66db2359d9f01d9d3ee2022b9de4436cdd930972fa1a9446d8f7747336b",
    "0x3651720d89601a5a1b19492b14d2c31e2f99b198b9208143cd3d0669d8028a2f",
    "0x2d67c2a143e17b919bf87a6e4b85f7bbd84e96a1c402dd47501b0862fa7086a5",
    "0xa26490e73f80685054e842ed44bedce662673bb75f3ce65f7259ff62ffcabd5b",
    "0x59dc6dc03b667409f0af0cd2e5cfe5aec2beea92cc5eb69d2bc2787c25e03703",
    "0x495e8c9b3af47c22615e8926a055b96c3643edbd18e0dd121f263709562cc22a",
    "0x1a41ae1d66fd1aaada65bf585a420e207a7e19813920675ac4391b58858cc1aa",
    "0xeae7f3504df99858342509a6049924168b8cfa212bb056b5bcbd8c85a5c7cb73",
]
proof_bytes = [bytes.fromhex(item[2:]) for item in proof]
proof_bytes_tuple = (tuple(proof_bytes),)
function_name = "mint(bytes32[])"

print(make_calldata(function_name, ["bytes32[]"], proof_bytes_tuple))


# b77a147b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000121794e7edff9a068add8aa3e269dee8466619e360be4f98cf4c42caef8c5b13e148a1381be462bf783bcd04223915b1bdfe3ae451663da68236a8a6a8ad98938b8f6734db8ce719630b260bf3495d114d6dae824f561efeb054fb4946220f29b335966e2fa59d454140dac15b9091478c80e414266800d31fa0b52ac30062e1eb1749c219a3c5656bc7999f3e548b6a1bace787edce228273c5b8206c2bded947fc7ef7fa1b27a9ed2d93566ebf0e6efb3ca0a2343b244bca27956368210d28d9529b137bbab51d197691cbf3b6b69bbb8b5cd355bf9d22be8477421835db7a7a89bd29554b81902036f0ad6688308d347c252d7046e4fed03413612242228202e8001ab2d3e7f449e05eeaabf0343b24bf8154ccecd67f3251b742bcba8249a30370ff474dfe0b126b6929eb103c8198451b100351491d55a46d8fc5d8adf7f9a812c0e40c641d7474970b717edbfad9f496a56dd2b757d52d47834bc7c0fcbb4ddb7b5fe647eb9d84891a89e4c051d262f407e017efdc5788badfcf3156fdea77404764eeb31621c6e781382047555bd4f571b97bc698667073f13bf2f3559006a6974c0e077ff5a6580401e63059c1545db957557ba60645278d4f385fba1b57b0a04f170ae95a7c73d9260af0b099b814bb7e59faa9a5f2dd11dc4e04f97d495e8c9b3af47c22615e8926a055b96c3643edbd18e0dd121f263709562cc22a1a41ae1d66fd1aaada65bf585a420e207a7e19813920675ac4391b58858cc1aaeae7f3504df99858342509a6049924168b8cfa212bb056b5bcbd8c85a5c7cb730021fb3f
# b77a147b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000012d996f7159beaa59fdf6c0ec0b2262858d468dc16d790e8eb354bba25f9282f249164366128e84cdc1e57f601edb8a0f454044ed4095c337066764cbe7c53a466ec830057f4c9a5fcc37a59713f8a40368df3e75603f4153c66562e64e89577894d92dc1a26a9f075ac20a66219ede2bb07f65cc2fa203b4f3795bf217b2d61482c76ef2e8799e9982c5463303c7ec802cc0b1a6c11de2591f9b45d97ab65eeb647baae93644e4a48d08ffca770f7b19490b5f86b88e5e35311815b46dd0fccb53d5de94656157450686b71b13cd6581601be5a2f33a15fe0ca367ad0ee264f178cd3da6b16bb4b21c33acd299202180d183f0f9941313d1fd26ab84a31082d19a3d63b552e547babc72711e950965efc7be63cef61fee7a62201fc83033040c61fa96fec7b1913e6f5c3125f9d1c7b5da559c74cae0cff387c4e8e8c9815b27b57f7c66db2359d9f01d9d3ee2022b9de4436cdd930972fa1a9446d8f7747336b3651720d89601a5a1b19492b14d2c31e2f99b198b9208143cd3d0669d8028a2f2d67c2a143e17b919bf87a6e4b85f7bbd84e96a1c402dd47501b0862fa7086a5a26490e73f80685054e842ed44bedce662673bb75f3ce65f7259ff62ffcabd5b59dc6dc03b667409f0af0cd2e5cfe5aec2beea92cc5eb69d2bc2787c25e03703495e8c9b3af47c22615e8926a055b96c3643edbd18e0dd121f263709562cc22a1a41ae1d66fd1aaada65bf585a420e207a7e19813920675ac4391b58858cc1aaeae7f3504df99858342509a6049924168b8cfa212bb056b5bcbd8c85a5c7cb730021fb3f

# contract_address = Web3.to_checksum_address(
#     "0x23e1fcF553A7dB590562f8a47bd76A28E358455E"
# )
# abi = etherscan_get_contract_abi("Optimism", contract_address)
# # print(abi)
# web3 = get_web3("op")
# contract = web3.eth.contract(address=contract_address, abi=abi)
# function_name, params = contract.decode_function_input(data)
# print(function_name)

# import binascii


# # 定义递归函数，将字节码转换为十六进制字符串
# def bytes_to_hexstring(obj):
#     if isinstance(obj, dict):
#         return {k: bytes_to_hexstring(v) for k, v in obj.items()}
#     elif isinstance(obj, list):
#         return [bytes_to_hexstring(item) for item in obj]
#     elif isinstance(obj, bytes):
#         return binascii.hexlify(obj).decode("utf-8")
#     else:
#         return obj


# # 将字节码转换为十六进制字符串
# hex_params = bytes_to_hexstring(params)

# print(json.dumps(hex_params))
